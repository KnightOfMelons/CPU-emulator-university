# Сделано Ильёй с любовью и под музыку из игры Гарри Поттер и Философский камень (Happy Hogwarts - Jeremy Soule)

# В техническом задании ещё сказано, что я должен сделать эмулятор по уже существующему процессору, но я в этой теме не
# шарю, поэтому спросил у ИИ и она подсказала, что это похоже на архитектуру старого процессора типа Burroughs B5000
# (первый компьютер с ним был сделан аж в 1961 году).

# (Фон-Неймановская архитектура), то есть тут один список/массив должен быть.
stack = []

# ПРИМЕР КОМАНД, С КОТОРЫМИ ПРОВОДИЛ ТЕСТИРОВАНИЕ:

#     "PUSH 2",  # Помещаем 2 на стек
#     "PUSH 3",  # Помещаем 3 на стек
#     "ADD",  # Складываем верхние два элемента на стеке
#     "PUSH 5",  # Помещаем 5 на стек
#     "ADD",  # Складываем результат с 5

# Функция для выполнения инструкций
def execute_instruction(instruction):
    parts = instruction.split()
    mnemonic = parts[0].upper()  # Все команды привожу к нижнему регистру, типа "проверка на дебила", мало ли

    # Команда для помещения значения в стек. То есть пишешь PUSH 100, затем в стек добавляется соточка, получается:
    # === Текущий стек: 100 ===
    if mnemonic == "PUSH":
        if len(parts) != 2 or not parts[1].isdigit():
            print("Ошибка: неверная команда PUSH")
            return
        value = int(parts[1])
        stack.append(value)

    # Команда ADD для складывания два верхних элемента стека
    elif mnemonic == "ADD":
        if len(stack) < 2:
            print("Ошибка: недостаточно элементов в стеке для выполнения операции 'add'")
            return
        b = stack.pop()  # Снимаем верхний элемент
        a = stack.pop()  # Снимаем следующий элемент
        result = a + b  # Складываем
        stack.append(result)  # Помещаем результат обратно на стек

    # Суммирование всех элементов стека (списка/массива, как угодно, короче), но также добавил проверку на то, что
    # если стек пустой, то выдается предупреждение.
    elif mnemonic == "SUM":
        if len(stack) == 0:
            print("\n=== Ошибка: стек пуст, невозможно выполнить 'SUM' ===")
        else:
            total = sum(stack)  # Суммируем все элементы стека
            stack.clear()  # Очищаем стек
            stack.append(total)  # Помещаем результат суммы обратно на стек
            print(f"\n=== Сумма всех элементов стека: {total} ===")

    # Команда для очистки стека (ну или списка, с Python же работаем). А-ля было у нас [100, 200, 10], а потом [].
    elif mnemonic == "CLEAR":
        stack.clear()
        print("Стек очищен.")

    # Команда для завершения работы программы
    elif mnemonic == "EXIT":
        print("\n=== Завершение программы. ===")
        return "exit"

    else:
        print(f"Инструкция '{mnemonic}' не поддерживается")


# Это основной цикл, в котором вводятся команды (ну тут как бы единственная переменная - command, логично же)
while True:
    # Получаем команду от пользователя
    command = input("\nСписок команд на выбор:\n\nPUSH <значение_в_цифрах>\nADD\nSUM (суммирует все элементы "
                    "стека)\nCLEAR (очищает стек от значений)\n"
                    "EXIT (выход из программы)\n\nВаша команда: ")

    # Выполняем команду
    if execute_instruction(command) == "exit":
        break

    # Выводим текущий стек после каждой команды
    print(f"\n=== Текущий стек: {stack} ===")
